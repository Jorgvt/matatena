[
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "Matatena",
    "section": "",
    "text": "Knucklebones is a simple game in which a dice is rolled and one of the two players must place it in their corresponding board. Each player can only choose the column in which the dice is placed, and if any dice is already placed in that column, the following is put behind. If there are more than one dice with the same number, their score is added and then multiplied by the number of times it appears. For example, if a column has two 6s, their values add up to 24, but if a column has a 6 and a 5, the total score would be 11.\n\nThe basic board is a 3x3 grid."
  },
  {
    "objectID": "core.html#calculating-the-score",
    "href": "core.html#calculating-the-score",
    "title": "Matatena",
    "section": "Calculating the score",
    "text": "Calculating the score\n\n\nGame.score\n\n Game.score (player)\n\nReturns the calculated score for a player. If there are numbers repeated in a column, their values must be added and multiplied by the number of repetitions. Otherwise, they are added. If there are repreated and non-repeated in the same column, the repeated are summed and multiplied by the number of repetitions and then the result is added to the non-repeated.\n\n\n\n\nDetails\n\n\n\n\nplayer\nNumber of the player we want to calculate the score.\n\n\n\n\nmatatena = Game()\nmatatena.boards[0] = np.array([[1,0,0],\n                               [1,2,3],\n                               [4,2,5]])\nassert matatena.score(0) == 8+8+8\n\nNow that we know how to calculate the score, we can patch the __repr__ method of our class to show the score of each player as well:\n\nmatatena = Game()\nassert not matatena.is_done()\nmatatena\n\nPlayer 1 (0.0)\n[[0. 0. 0.]\n [0. 0. 0.]\n [0. 0. 0.]]\nPlayer 2 (0.0) *\n[[0. 0. 0.]\n [0. 0. 0.]\n [0. 0. 0.]]\n\n\n\nmatatena = Game()\nmatatena\n\nPlayer 1 (0.0) * | Player 2 (0.0)\n[[0. 0. 0.]      | [[0. 0. 0.]   \n [0. 0. 0.]      |  [0. 0. 0.]   \n [0. 0. 0.]]     |  [0. 0. 0.]]"
  },
  {
    "objectID": "core.html#full-turn",
    "href": "core.html#full-turn",
    "title": "Matatena",
    "section": "Full turn",
    "text": "Full turn\nA full turn in a Matatena game must follow the following steps:\n\nCheck the current player\nDraw a random dice\nPlace the dice in a column\n\nCheck if the column is not full -> The dice can be placed (If it can’t be placed the game is ended)\n\nChange the current player to the next one in the list\nRepeat\n\n\n\nGame.play_turn\n\n Game.play_turn ()\n\nPlays a full turn.\n\nmatatena = Game()\nprint(matatena.current_player)\nmatatena.play_turn()\n# The player is asked for an input and the rolled dice is placed\n# in the chosen column.\nprint(matatena.current_player)\nmatatena\n\n0\nDice to place: 5\nPlayer 1 (0.0) * | Player 2 (0.0)\n[[0. 0. 0.]      | [[0. 0. 0.]   \n [0. 0. 0.]      |  [0. 0. 0.]   \n [0. 0. 0.]]     |  [0. 0. 0.]]  \n0\n\n\nPlayer 1 (5.0) * | Player 2 (0.0)\n[[5. 0. 0.]      | [[0. 0. 0.]   \n [0. 0. 0.]      |  [0. 0. 0.]   \n [0. 0. 0.]]     |  [0. 0. 0.]]"
  },
  {
    "objectID": "exceptions.html",
    "href": "exceptions.html",
    "title": "Custom exceptions",
    "section": "",
    "text": "ColumnFullError\nRaised when trying to put a dice in a column that is already full."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "matatena",
    "section": "",
    "text": "pip install matatena"
  }
]